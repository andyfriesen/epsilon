import sys
import os

def buildConfigHeader(env, target):
    defines = []

    if sys.platform == 'win32':
        defines.append('EPS_WINDOWS')

    if env['endian'] == 'little':
        defines.append('EPS_LITTLE_ENDIAN')
    else:
        assert env['endian'] == 'big'
        defines.append('EPS_BIG_ENDIAN')

    # TODO: implement UNICODE properly where available.
    if 1 or env['chartype'] == 'ascii':
        defines.append('EPS_ASCII')
    else:
        defines.append('EPS_UNICODE')

    if platform == 'win32':
        defines.append('EPS_WIN32')
    elif platform in ('x11', 'linux', 'cygwin'):
        defines.append('EPS_X11')
    elif platform == 'macosx':
        defines.append('EPS_MACOSX')
    else:
        assert False, 'Unrecognized platform \'%s\'' % platform

    # if both debug and release are set, release wins
    debug = env.get('debug')
    if debug:
        defines.append('EPS_DEBUG')
    else:
        defines.append('EPS_NDEBUG')

    try:
        config = type('#$^@#^#$^$#^# anonymous!', (object,), {})()
        config.h = file(target, 'wt')
        print >> config.h, "// This file is automatically generated by SConstruct.  Don't edit it by hand!"
        print >> config.h, '#ifndef EPS_EPSILON_CONFIG_H'
        print >> config.h, '#define EPS_EPSILON_CONFIG_H'
        print >> config.h
        for d in defines:
            print >> config.h, '#define ' + d
        print >> config.h
        print >> config.h, '#endif'
    except (Exception, e):
        print 'Failed to write ' + target
        print str(e)
        print "Trying to carry on anyway.  Maybe it'll go away if we cross our fingers!"


def msvc(env):
    env.Append(TOOLS='msvc')
    env.Append(CPPFLAGS='/EHsc')

def gcc(env):
    env.Append(TOOLS='gcc')

def win32(env):
    pass

def x11(env):
    env.Prepend(CPPPATH=['/usr/X11R6/include'])

def nop(env):
    pass

platform = {
    'win32' : 'win32',
    'linux' : 'x11',
    'cygwin' : 'x11'
} [sys.platform]

endian = ARGUMENTS.get('endian', sys.byteorder)

source = Split('''
    src/epsilon/error/error.cpp
''')

platform_source = Split('''
    core/core.cpp
    wm/wm.cpp
    event/event.cpp
    opengl/opengl.cpp
''')

tools=['default']

compiler = ARGUMENTS.get('compiler')
if compiler == 'msvc':
    tools = ['msvc', 'mslink', 'mslib', 'msvs']
elif compiler == 'gcc':
    tools = ['gcc', 'g++', 'gnulink', 'ar']
else:
    tools = None

for name in platform_source:
    dir, name = name.split('/')
    source.append('src/epsilon/%s/%s/%s' % (dir, platform, name))

env = Environment(tools=tools, ENV=os.environ, CPPPATH='src', endian=endian)

if env['CC'] == 'cl':
    msvc(env)
elif env['CC'] == 'gcc':
    gcc(env)

globals()[platform](env)

buildConfigHeader(env, 'src/epsilon/config.h')

objs = env.Object(source)

library = env.Library('#/epsilon', objs)

Export('env', 'library')

gltest = SConscript('#/test/gltest/SConscript')
#inputtest = SConscript('test/inputtest/SConscript')
#wmtest = SConscript('test/wmtest/SConscript')
